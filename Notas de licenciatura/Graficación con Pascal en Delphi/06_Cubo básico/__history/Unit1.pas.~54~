unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls;

type
  TForm1 = class(TForm)
    Panel1: TPanel;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    Button5: TButton;
    Button6: TButton;
    Button7: TButton;
    Button8: TButton;
    Image1: TImage;
    Button9: TButton;
    procedure FormCreate(Sender: TObject);
    procedure Button8Click(Sender: TObject);
    procedure Button7Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button9Click(Sender: TObject);


  private
    { Private declarations }
  public
    { Public declarations }
  end;

  // Definición de TPoint3D
  type
    TPoint3D = packed record
      x: Real;
      y: Real;
      z: Real;
  end;
  // Definición de constantes
  const
    TamFig = 1;

//Variables globales
var
  Form1: TForm1;
  //Definición del cubo
  Cubo : Array[1..10] of TPoint3D;
  origin : Array[1..6] of TPoint3D;
  //Variables para pintar en pantalla
  P, Q : TPoint;
  //Variables auxiliares para la rotación
  xAux, yAux, zAux : Real;
  origen : integer;

implementation

{$R *.dfm}

procedure TForm1.Button1Click(Sender: TObject);
var alfa :Real;
    I : Integer;
begin // ROTA EN X
  alfa := (15*Pi) / 180.0; // Grados a radianes
  for i := 1 to 10 do
    begin
      yAux := (Cubo[i].y * COS( alfa )) + (Cubo[i].z * SIN( alfa ));
      zAux := -(Cubo[i].y * SIN( alfa )) + (Cubo[i].z * COS( alfa ));
      Cubo[i].y := yAux;
      Cubo[i].z := zAux;
    end;

    for i := 1 to 6 do
    begin
      yAux := (origin[i].y * COS( alfa )) + (origin[i].z * SIN( alfa ));
      zAux := -(origin[i].y * SIN( alfa )) + (origin[i].z * COS( alfa ));
      origin[i].y := yAux;
      origin[i].z := zAux;
    end;
    Form1.Button7Click(Sender);
end;


procedure TForm1.Button2Click(Sender: TObject);
var alfa :Real;
    I : Integer;begin
  // ROTA (-) EN X
  alfa := (15*Pi) / 180.0; // Grados a radianes
  for i := 1 to 10 do
    begin
      yAux := (Cubo[i].y * COS( -alfa )) + (Cubo[i].z * SIN( -alfa ));
      zAux := -(Cubo[i].y * SIN( -alfa )) + (Cubo[i].z * COS( -alfa ));
      Cubo[i].y := yAux;
      Cubo[i].z := zAux;
    end;

    for i := 1 to 6 do
    begin
      yAux := (origin[i].y * COS( -alfa )) + (origin[i].z * SIN( -alfa ));
      zAux := -(origin[i].y * SIN( -alfa )) + (origin[i].z * COS( -alfa ));
      origin[i].y := yAux;
      origin[i].z := zAux;
    end;
    Form1.Button7Click(Sender);
end;

procedure TForm1.Button3Click(Sender: TObject);
var alfa :Real;
    I : Integer;
begin
  //ROTA EN Y
  alfa := (15*Pi) / 180.0; // Grados a radianes
  for i := 1 to 10 do
    begin
      xAux := (Cubo[i].x * COS( -alfa )) + (Cubo[i].z * SIN( -alfa ));
      zAux := -(Cubo[i].x * SIN( -alfa )) + (Cubo[i].z * COS( -alfa ));
      Cubo[i].x := xAux;
      Cubo[i].z := zAux;
    end;

    for i := 1 to 6 do
    begin
      xAux := (origin[i].x * COS( -alfa )) + (origin[i].z * SIN( -alfa ));
      zAux := -(origin[i].x * SIN( -alfa )) + (origin[i].z * COS( -alfa ));
      origin[i].x := xAux;
      origin[i].z := zAux;
    end;
    Form1.Button7Click(Sender);
end;

procedure TForm1.Button4Click(Sender: TObject);
var alfa :Real;
    I : Integer;
begin
  // ROTA (-) EN Y
  alfa := (15*Pi) / 180.0; // Grados a radianes
  for i := 1 to 10 do
    begin
      xAux := (Cubo[i].x * COS( alfa )) + (Cubo[i].z * SIN( alfa ));
      zAux := -(Cubo[i].x * SIN( alfa )) + (Cubo[i].z * COS( alfa ));
      Cubo[i].x := xAux;
      Cubo[i].z := zAux;
    end;

    for i := 1 to 6 do
    begin
      xAux := (origin[i].x * COS( alfa )) + (origin[i].z * SIN( alfa ));
      zAux := -(origin[i].x * SIN( alfa )) + (origin[i].z * COS( alfa ));
      origin[i].x := xAux;
      origin[i].z := zAux;
    end;
    Form1.Button7Click(Sender);
end;


procedure TForm1.Button5Click(Sender: TObject);
var alfa :Real;
    I : Integer;
begin
  // ROTA EN Z
  alfa := (15*Pi) / 180.0; // Grados a radianes
  for i := 1 to 10 do
    begin
      xAux := (Cubo[i].x * COS( -alfa )) + (Cubo[i].y * SIN( -alfa ));
      yAux := -(Cubo[i].x * SIN( -alfa )) + (Cubo[i].y * COS( -alfa ));
      Cubo[i].x := xAux;
      Cubo[i].y := yAux;
    end;

    for i := 1 to 6 do
    begin
      xAux := (origin[i].x * COS( -alfa )) + (origin[i].y * SIN( -alfa ));
      yAux := -(origin[i].x * SIN( -alfa )) + (origin[i].y * COS( -alfa ));
      origin[i].x := xAux;
      origin[i].y := yAux;
    end;
    Form1.Button7Click(Sender);
end;

procedure TForm1.Button6Click(Sender: TObject);
var alfa :Real;
    I : Integer;
begin
  // ROTA (-) EN Z
  alfa := (15*Pi) / 180.0; // Grados a radianes
  for i := 1 to 10 do
    begin
      xAux := (Cubo[i].x * COS( alfa )) + (Cubo[i].y * SIN( alfa ));
      yAux := -(Cubo[i].x * SIN( alfa )) + (Cubo[i].y * COS( alfa ));
      Cubo[i].x := xAux;
      Cubo[i].y := yAux;
    end;

    for i := 1 to 6 do
    begin
      xAux := (origin[i].x * COS( alfa )) + (origin[i].y * SIN( alfa ));
      yAux := -(origin[i].x * SIN( alfa )) + (origin[i].y * COS( alfa ));
      origin[i].x := xAux;
      origin[i].y := yAux;
    end;
    Form1.Button7Click(Sender);
end;

procedure TForm1.Button7Click(Sender: TObject);
var I : Integer;
begin
Image1.Canvas.Rectangle(0,0,500,500);
// Pinta el Piso del Cubo
// ?
  for I := 1 to 3 do   // pinta cruz 3D
  begin
  P.x := Round(origin[i].x)*(-100) + 250;
  P.y := Round(origin[i].y)*(100) + 250;
  Q.x := Round(origin[i+(1*i)].x)*(-100) + 250;
  Q.y := Round(origin[i+(1*i)].y)*(100) + 250;

  if (i=1) then Image1.Canvas.Pen.Color := clBlue;
  if (i=2) then Image1.Canvas.Pen.Color := clred;
  if (i=3) then Image1.Canvas.Pen.Color := clgreen;

  Image1.Canvas.MoveTo(P.x, P.y);
  Image1.Canvas.LineTo(Q.x, Q.y);
  Image1.Canvas.Pen.Color := clBlack;
  end;


  for I := 1 to 4 do
  begin
  P.x := Round(Cubo[i].x) + 250;
  P.y := Round(Cubo[i].y) + 250;
  Q.x := Round(Cubo[i+1].x) + 250;
  Q.y := Round(Cubo[i+1].y) + 250;
  Image1.Canvas.Pen.Color := clBlue;
  Image1.Canvas.MoveTo(P.x, P.y);
  Image1.Canvas.LineTo(Q.x, Q.y);
  Image1.Canvas.Pen.Color := clBlack;
  end;
// Pinta el Techo del Cubo
  for I := 6 to 9 do
  begin
  P.x := Round(Cubo[i].x) + 250;
  P.y := Round(Cubo[i].y) + 250;
  Q.x := Round(Cubo[i+1].x) + 250;
  Q.y := Round(Cubo[i+1].y) + 250;
  Image1.Canvas.Pen.Color := clRed;
  Image1.Canvas.MoveTo(P.x, P.y);
  Image1.Canvas.LineTo(Q.x, Q.y);
  Image1.Canvas.Pen.Color := clBlack;
  end;
// Pinta las paredes (aristas) del Cubo
  for I := 1 to 4 do
  begin
  P.x := Round(Cubo[i].x) + 250;
  P.y := Round(Cubo[i].y) + 250;
  Q.x := Round(Cubo[i+5].x) + 250;
  Q.y := Round(Cubo[i+5].y) + 250;
  Image1.Canvas.Pen.Color := clGreen;
  Image1.Canvas.MoveTo(P.x, P.y);
  Image1.Canvas.LineTo(Q.x, Q.y);
  Image1.Canvas.Pen.Color := clBlack;
  end;
end;

procedure TForm1.Button8Click(Sender: TObject);
begin // Clows
  close();
end;

procedure TForm1.Button9Click(Sender: TObject);
var I: integer;
begin
origen := origen +1;
for I := 1 to 10 do
begin
  Cubo[I].x := Cubo[I].x * 1-origen;
  Cubo[I].y := Cubo[I].y * 1-origen;
  Cubo[I].z := Cubo[I].z * 1-origen;
end;
Form1.Button7Click(Sender);
end;

procedure TForm1.FormCreate(Sender: TObject);
var  // constructor
  I: Integer;
begin
  Image1.Canvas.Rectangle(0,0,500,500);
  // Piso del Cubo, note que Cubo[1] = Cubo[5]
  Cubo[1].x := +TamFig; Cubo[1].y := +TamFig; Cubo[1].z := -TamFig;
  Cubo[2].x := +TamFig; Cubo[2].y := -TamFig; Cubo[2].z := -TamFig;
  Cubo[3].x := -TamFig; Cubo[3].y := -TamFig; Cubo[3].z := -TamFig;
  Cubo[4].x := -TamFig; Cubo[4].y := +TamFig; Cubo[4].z := -TamFig;
  Cubo[5].x := +TamFig; Cubo[5].y := +TamFig; Cubo[5].z := -TamFig;
  // Techo del Cubo, note que Cubo[6] = Cubo[10]
  Cubo[6].x := +TamFig; Cubo[6].y := +TamFig; Cubo[6].z := +TamFig;
  Cubo[7].x := +TamFig; Cubo[7].y := -TamFig; Cubo[7].z := +TamFig;
  Cubo[8].x := -TamFig; Cubo[8].y := -TamFig; Cubo[8].z := +TamFig;
  Cubo[9].x := -TamFig; Cubo[9].y := +TamFig; Cubo[9].z := +TamFig;
  Cubo[10].x := +TamFig; Cubo[10].y := +TamFig; Cubo[10].z := +TamFig;
  //Transformacion de Escala
  for I := 1 to 10 do
    begin
      Cubo[I].x := Cubo[I].x * 40;
      Cubo[I].y := Cubo[I].y * 40;
      Cubo[I].z := Cubo[I].z * 40;
    end;

  origin[1].x := -TamFig; origin[1].y := -TamFig; origin[1].z := -TamFig;
  origin[2].x := +TamFig; origin[2].y := -TamFig; origin[2].z := -TamFig;
  origin[3].x := +TamFig; origin[3].y := -TamFig; origin[3].z := -TamFig;
  origin[4].x := +TamFig; origin[4].y := +TamFig; origin[4].z := -TamFig;
  origin[5].x := +TamFig; origin[5].y := -TamFig; origin[5].z := -TamFig;
  origin[6].x := +TamFig; origin[6].y := -TamFig; origin[6].z := +TamFig;
  //Transformacion de Escala
  for I := 1 to 6 do
    begin
      origin[I].x := origin[I].x * 10;
      origin[I].y := origin[I].y * 10;
      origin[I].z := origin[I].z * 10;
    end;
  //origen := 1;
  //Transformacion Rotación

  //Transformacion Traslación TRE( FIG )


end;


end.
