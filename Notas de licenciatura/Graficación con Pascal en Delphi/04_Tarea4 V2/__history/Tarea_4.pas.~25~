unit Tarea_4;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls;

type
  TForm1 = class(TForm)
    ScrollBox1: TScrollBox;
    Image1: TImage;
    Panel1: TPanel;
    Panel2: TPanel;
    Panel3: TPanel;
    Label1: TLabel;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    Button5: TButton;
    Button6: TButton;
    Button7: TButton;
    Edit1: TEdit;
    Button8: TButton;
    Button9: TButton;
    Button10: TButton;
    Button11: TButton;
    Button12: TButton;
    Button13: TButton;
    Edit2: TEdit;
    OpenDialog1: TOpenDialog;
    procedure FormCreate(Sender: TObject);
    procedure Image1Click(Sender: TObject);
    procedure Image1MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure Button11Click(Sender: TObject);
    procedure Button10Click(Sender: TObject);
    procedure Button9Click(Sender: TObject);
    procedure Button8Click(Sender: TObject);
    procedure Button12Click(Sender: TObject);
    procedure Button13Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure Button7Click(Sender: TObject);
    procedure Edit1Change(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

// V A R I A B L E S   G L O B A L E S <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  type cslineas = packed record // Fibra y Cable son líneas
    x0,y0,xf,yf,mts,t : integer;
  end;

  type csimagenes = packed record // El resto de componentes son imágenes
    x0,y0,ang,t : integer;
  end;

var Form1: TForm1;
  // Variables para imágenes:
  Firewall, Switch: TBitMap;
  Server,Server90,Server180,Server270 : TBitMap;
  PC,PC90,PC180,PC270 : TBitMap;
  Impresora,Impresora90,Impresora180,Impresora270 : TBitMap;

  // Auxiliares de  coordenadas:
  x1, y1, x2, y2, pg , qg, lims: integer ;

  // Contadores de líneas y de imágenes (respectivamente)
  nfl, nfi: integer ;

  clineas : Array [1..100] of cslineas;    // arreglo de Fibras y Cables
  cimagenes : array [1..300] of csimagenes;// arreglo de el resto de los componentes

implementation

{$R *.dfm}

// A U T O R <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Button10Click(Sender: TObject);
begin
showmessage('Autor:       Israel Omar Hernández Gómez    |    201929741');
end;

// S A L I R <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Button11Click(Sender: TObject);
begin
Application.terminate;
end;

// A B R I R   D I S E Ñ O <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Button12Click(Sender: TObject);
var
  fl : TextFile ;
  d1,d2,d3,d4,d5,d6,i,j,aux,pxls: integer ;
begin
// open file
//esta parte del código es la misma que la del botón "borrar todo"
//para estar seguros de no tener errores a la hora de la lectura de datos
image1.canvas.Rectangle(0,0,2000,2000); image1.canvas.pen.Color := clskyblue ;
for I := 0 to 100 do begin
  image1.canvas.moveto(I*20,0); image1.canvas.lineto(I*20,2000); end;
for J := 0 to 100 do begin
  image1.canvas.moveto(0,J*20); image1.canvas.lineto(2000,J*20); end;

for I := 1 to 100 do begin
    with clineas[nfl] do begin
      x0 := 0 ;
      y0 := 0 ;
      xf := 0 ;
      yf := 0 ;
      mts := 0;
      t := 0 ;
    end;
end;
for I := 1 to 300 do begin
  with cimagenes[nfi] do begin
    x0 := 0;
    y0 := 0;
    ang := 0;
    t := 0 ;
  end;
end;
nfl := 1 ; nfi := 1 ;
// Fin del código de "Borrar todo"

i := 1;
if (opendialog1.Execute) then begin //opendialog igual que como lo vimos en clase
  Assignfile(fl, opendialog1.FileName);
  Reset(fl);
  d6 := 0;
  while (  d6 <> 2524) do begin    // recordemos que al teminar de escribir los
    Readln(fl,d1,d2,d3,d4,d5,d6);  // datos del arreglo de líneas, se escribe en
    if (d6 <> 2524) then begin     // el archivo "2524", esto como ya se dijo, es
      with clineas[i] do begin     // para diferenciar la parte correspondiente a
        x0 := d1;                  // ese arreglo y la parte correspondiente al
        y0 := d2;                  // otro (el array de imágenes).
        xf := d3;
        yf := d4;
        mts := d5;
        t := d6;            // leemos los datos de las líneas...
      end;
      i := i+1;
      nfl := i;
    end else begin
      i := 1;               // ahora leemos los datos de las imágenes...
      while not EoF(fl) do begin
        Readln(fl,d1,d2,d3,d4);
        with cimagenes[i] do begin
          x0 := d1;
          y0 := d2;
          ang := d3;
          t := d4 ;
        end;
        i := i+1;
        nfi := i;
      end;
    end;
  end;
  // terminando de llenar nuestros arrrays con los
  // datos leídos de los archivos,cerramos el "fl"
  CloseFile(fl);
end;
// y empezamos a dibujar cada componente en cada arreglo
// de golpe, a lo loco, pues aquí no necesitamos verificar mucho
// aquí los datos solitos hacen su trabajo, es bellísimo

// primero Fibras y Cables (arreglo de líneas)
for i := 1 to nfl-1 do begin
  qg := clineas[i].y0;  y2 := clineas[i].yf ;
  pg := clineas[i].x0;  x2 := clineas[i].xf ;

  if clineas[i].t = 1 then begin
    image1.canvas.pen.color := $0004C5F4;
    aux := 6;
    pxls := 7;
  end else begin
    image1.canvas.pen.color := clblack;
    aux := 4;
    pxls := 8;
  end;

  if (qg = y2) then begin // linea horizontal
     for j := 1 to aux do begin
      image1.canvas.moveto(pg,qg+pxls+j);
      image1.canvas.lineto(x2,qg+pxls+j);
    end;
  end;
  if (pg = x2) then begin // linea vertical
    for j := 1 to aux do begin
      image1.canvas.moveto(pg+pxls+j,qg);
      image1.canvas.lineto(pg+pxls+j,y2);
    end;
  end;

end;

// luego Firewalls, Switches, Servers, PC's e impresoras
// (arreglo de datos de imágenes)
for I := 1 to nfi-1 do begin
  aux := cimagenes[i].ang;
    case cimagenes[i].t of
    1:begin
        image1.Canvas.Draw(cimagenes[i].x0,cimagenes[i].y0,Firewall);
      end;
    2:begin
        case aux of
          0 : image1.Canvas.Draw(cimagenes[i].x0,cimagenes[i].y0,Server);
          90: image1.Canvas.Draw(cimagenes[i].x0,cimagenes[i].y0,Server90);
          180: image1.Canvas.Draw(cimagenes[i].x0,cimagenes[i].y0,Server180);
          270: image1.Canvas.Draw(cimagenes[i].x0,cimagenes[i].y0,Server270);
        end;
      end;
    3:begin
        image1.Canvas.Draw(cimagenes[i].x0,cimagenes[i].y0,Switch);
      end;
    4:begin
        case aux of
          0 : image1.Canvas.Draw(cimagenes[i].x0,cimagenes[i].y0,PC);
          90: image1.Canvas.Draw(cimagenes[i].x0,cimagenes[i].y0,PC90);
          180: image1.Canvas.Draw(cimagenes[i].x0,cimagenes[i].y0,PC180);
          270: image1.Canvas.Draw(cimagenes[i].x0,cimagenes[i].y0,PC270);
        end;
      end;
    5:begin
        case aux of
          0 : image1.Canvas.Draw(cimagenes[i].x0,cimagenes[i].y0,Impresora);
          90: image1.Canvas.Draw(cimagenes[i].x0,cimagenes[i].y0,Impresora90);
          180: image1.Canvas.Draw(cimagenes[i].x0,cimagenes[i].y0,Impresora180);
          270: image1.Canvas.Draw(cimagenes[i].x0,cimagenes[i].y0,Impresora270);
        end;
      end;
    end;

  end;
image1.canvas.pen.Color := clskyblue ;
end;

// G U A R D A R   D I S E Ñ O <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Button13Click(Sender: TObject);    // guarda diseño
var
    New: Textfile;
    name,line : string;
    d1,d2,d3,d4,d5,d6,i, bndcrc, bndenie : integer ;
begin
if ((nfl = 1) and (nfi = 1)) then // verificamos que haya datos que guardar en el archivo
  showmessage('No hay nada que guardar...')
else begin
    bndcrc := 0 ;  bndenie := 0;// banderas para detectar caracteres inválidos en el nombre dado
    name := (Edit2.Text);// obtenemos el nombre dado por el usuario
    if (name = '') then begin// si usuario no da un nombre, se lo asignamos
      edit2.Color:= clred ;
      edit2.Font.color := clwhite;
      name := (datetostr(date)+'_A_las_'+timetostr(time));
      for i := 0 to name.Length do begin// eliminamos caracteres inválidos
        if (name[i] = '.') or (name[i] = '/') or (name[i] = ':') then name[i] := '-';
      end;
      Edit2.text := name;// el nombre del archivo será la fecha y hora de guardado
      showmessage('Se Asignó al nombre del diesño la fecha y hora de hoy'+#13+#10+
                  'Pero recuerda que puedes guardarlo con el nombre que quieras');
      edit2.Color:= clwhite ;
      edit2.Font.color := clblack;
    end;

    for i := 0 to name.Length do begin // eliminamos caracteres inválidos
      if((name[i] = '.') or (name[i] = '/') or (name[i] = '\') or (name[i] = '*')
      or (name[i] = '"') or (name[i] = '[') or (name[i] = ']') or (name[i] = ';')
      or (name[i] = ',') or (name[i] = ':') or (name[i] = '¬') ) then begin
        name[i] := '-' ;
        bndcrc := 1 ;
      end;
      if (name[i] = 'ñ') or (name[i] = 'Ñ') then begin
        name[i] := 'n' ;
        bndenie := 1 ;
      end;
    end;

    name := name+'.Txt'; { <- guardaremos el archivo como .Txt}

    Assignfile( new, name );  { <- empezamos el manejo del Archivo como tal }
    rewrite( new );           { <- modo escribir }
    d6 := 2524;               { <- d6 = 2524 sólo para entrar al while }
    i := 1 ; { <- iterador }
    while (  d6 <> 0) do begin
      with clineas[i] do begin // guardamos los datos de las Fibras y Cables
        d1 := x0;
        d2 := y0;
        d3 := xf;
        d4 := yf;
        d5 := mts;
        d6 := t;      { <- si t = 0 entonces no hay más "líneas" que guardar }
      end;
      if (d6 <> 0) then begin
        line := inttostr(d1)+' '+inttostr(d2)+' '+inttostr(d3)+' '+inttostr(d4)+' '+inttostr(d5)+' '+inttostr(d6)+' ';
        writeLn( new, line );  { <- justo aqui se escribe en el achivo }
        i := i+1;
      end;
    end;

    line := '0 0 0 0 0 2524'; { <- escribimos esta línea en el archivo para   }
    writeln( new , line );    {    indicar que a partir de ahí, los datos son }
    i:=1;{ <- Reiniciamos }   {    de componentes basados en imágenes         }

    while i<nfi do begin { <- empezamos a escribir los datos de las imágenes }
      with cimagenes[i] do begin
        d1 := x0;
        d2 := y0;
        d3 := ang;
        d4 := t ;
      end;
      line := inttostr(d1)+' '+inttostr(d2)+' '+inttostr(d3)+' '+inttostr(d4);
      Writeln(new, line);    { <- justo aquí se escribe en el archivo }
      i := i+1;
    end;

    Closefile( new );
    if (bndcrc = 1) then { avisamos si se ingresaron caracteres inválidos }
      showmessage('se cambiaron algunos caracteres inválidos por "-"');

    if(bndenie = 1) then
      showmessage('se cambiaron las "ñ"´s por "n"´s');

    edit2.Text := name;
    showmessage('Diseño:  '+name+'  guardado !!');
end;
end;

// P I N T A   F I B R A <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Button1Click(Sender: TObject);
var i ,m ,aux: integer ;
begin
m := 0; //contador de metros
image1.canvas.pen.color := $0004C5F4;// color del tubo

if (qg = y2) then begin // pinta linea horizontal
    if (pg>x2) then begin aux:=pg;pg:=x2;x2:=aux; end;
    x2 := x2 + lims;
    for I := 1 to 6 do begin
      image1.canvas.moveto(pg,qg+7+I);
      image1.canvas.lineto(x2,qg+7+I);
    end;//calcula los metros de la línea
    m := (round(x2/20) - round(pg/20)) ;
end;
if (pg = x2) then begin // pinta linea vertical
    if (qg>y2) then begin aux:=qg;qg:=y2;y2:=aux; end;
    y2 := y2 + lims;
    for I := 1 to 6 do begin
      image1.canvas.moveto(pg+7+I,qg);
      image1.canvas.lineto(pg+7+I,y2);
    end;//calcula los metros de la línea
    m := (round(y2/20) - round(qg/20)) ;
end;
if ((qg <> y2)and (pg <> x2)) then // linea diagonal (no se puede)
    showmessage('verifíca la línea que intentas dibujar (no se admiten líneas diagonales)')
else begin
    with clineas[nfl] do begin  //Guardamos sus datos en el arreglo de líneas
      x0 := pg ;
      y0 := qg ;
      xf := x2 ;
      yf := y2 ;
      mts := m ;
      t := 1 ;
    end;

    if (lims=20) then begin
      x2 := x2-20;
      y2 := y2-20;
    end;

    nfl := nfl+1 ; // aumentamos en 1 elcontador de fibras y cables
end;
image1.canvas.pen.Color := clskyblue ;
end;

// P I N T A   C A B L E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Button2Click(Sender: TObject);
var I ,m, aux: integer ;
begin  // funciona igual que con las fibras, pero modificamos cosillas
m := 0;
image1.Canvas.pen.color := clblack;//(negro para cables)

if (qg = y2) then begin{ <- horizontal}
    if (pg>x2) then begin aux:=pg;pg:=x2;x2:=aux; end;
    x2 := x2 + lims;
    for I := 1 to 4 do begin
      image1.canvas.moveto(pg,qg+8+I);
      image1.canvas.lineto(x2,qg+8+I);
    end;{calcula metros...}
    m := (round(x2/20) - round(pg/20)) ;
end;
if (pg = x2) then begin{ <- vertical}
    if (qg>y2) then begin aux:=qg;qg:=y2;y2:=aux; end;
    y2 := y2 + lims;
    for I := 1 to 4 do begin
      image1.canvas.moveto(pg+8+I,qg);
      image1.canvas.lineto(pg+8+I,y2);
    end;{calcula  metros...}
    m := (round(y2/20) - round(qg/20)) ;
end;
if ((qg <> y2)and (pg <> x2)) then { <- linea diagonal}
    showmessage('verifíca la línea que intentas dubijar (no se admiten líneas diagonales)')
  else begin
    with clineas[nfl] do begin  //Guardamos sus datos en el arreglo de líneas
      x0 := pg ;
      y0 := qg ;
      xf := x2 ;
      yf := y2 ;
      mts := m ;
      t := 2 ;  // clineas[i].t = 1 indica que clineas[i] es un cable
    end;
    nfl := nfl+1; // aumentamos en 1 elcontador de fibras y cables
  end;
image1.canvas.pen.Color := clskyblue ;
end;

// P I N T A   F I R E W A L L <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Button3Click(Sender: TObject);
begin
image1.Canvas.Draw(x2,y2,Firewall);
  with cimagenes[nfi] do begin //Guardamos sus datos en el arreglo de imágenes
    x0 := x2;
    y0 := y2;
    ang := 0;
    t := 1 ;
  end;
  nfi := nfi+1 ; // aumentamos contador de componentes de tipo imágen

// y funciona igual para el dibujado del resto de los componentes, pero
// algunos guardan también el ángulo, en cuyo caso se abre un switch para
// pintar y guardar los datos en dicho ángulo.
end;

// P I N T A   S E R V E R <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Button4Click(Sender: TObject);
var g ,bnd: integer;
begin
bnd := 1;
g := strtoint(Edit1.Text);
case g of //Switch
    0 : image1.Canvas.Draw(x2,y2,Server);
   90: image1.Canvas.Draw(x2,y2,Server90);
   180: image1.Canvas.Draw(x2,y2,Server180);
   270: image1.Canvas.Draw(x2,y2,Server270);
   else begin// en caso de error
     ShowMessage('El ángulo dado sólo puede ser  0, 90, 180 ó 270');
     bnd := 0;
   end;
end;
if (bnd = 1) then begin
  with cimagenes[nfi] do begin  //Guardamos datos
    x0 := x2;
    y0 := y2;
    ang := g;
    t := 2 ;
  end;
  nfi := nfi+1 ; // aumentamos contador de imágenes
end;

end;

// P I N T A   S W I T C H <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Button5Click(Sender: TObject);
begin
image1.Canvas.Draw(x2,y2,Switch);
with cimagenes[nfi] do begin  //Guardamos datos
  x0 := x2;
  y0 := y2;
  ang := 0;
  t := 3 ;
end;
nfi := nfi+1 ;  // aumentamos contador de imágenes

end;

// P I N T A   P C <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Button6Click(Sender: TObject);
var g ,bnd: integer;
begin
bnd := 1;
g := strtoint(Edit1.Text);
case g of //Switch
    0 : image1.Canvas.Draw(x2,y2,PC);
   90: image1.Canvas.Draw(x2,y2,PC90);
   180: image1.Canvas.Draw(x2,y2,PC180);
   270: image1.Canvas.Draw(x2,y2,PC270);
   else begin// en caso de error
     ShowMessage('El ángulo dado sólo puede ser  0, 90, 180 ó 270');
     bnd := 0;
   end;
end;
if (bnd = 1) then begin
  with cimagenes[nfi] do begin  //Guardamos datos
    x0 := x2;
    y0 := y2;
    ang := g;
    t := 4 ;
  end;
  nfi := nfi+1 ; //  y asi......
end;

end;

// P I N T A   I M P R E S O R A <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Button7Click(Sender: TObject);
var g ,bnd: integer;
begin
bnd := 1;
g := strtoint(Edit1.Text);
case g of
    0 : image1.Canvas.Draw(x2,y2,Impresora);
   90: image1.Canvas.Draw(x2,y2,Impresora90);
   180: image1.Canvas.Draw(x2,y2,Impresora180);
   270: image1.Canvas.Draw(x2,y2,Impresora270);
   else begin
     ShowMessage('El ángulo dado sólo puede ser  0, 90, 180 ó 270');
     bnd := 0;
   end;
end;
if (bnd = 1) then begin
  with cimagenes[nfi] do begin
    x0 := x2;
    y0 := y2;
    ang := g;
    t := 5 ;
  end;
  nfi := nfi+1 ;
end;

end;

// B O R R A R   U N   E L E M E N T O <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Button8Click(Sender: TObject);
var it,j,bx,by,lx,ly,aux,k,bnd: integer ;
begin
// buscamos en los arreglos para ver si el punto seleccionado intercepta con
// alguno de los dibujados del componente [i], si lo hace, borramos [i]
// (se busca cuadro por cuadro, es decir; las coordenadas cada 20 pixeles)

for it := 1 to nfl-1 do begin
  bnd := 0;  bx:=clineas[it].x0 ;  by:=clineas[it].y0 ;
  lx:=clineas[it].xf ;  ly:=clineas[it].yf ;
  while (bx < lx) do begin //buscar línea horizontal
    if ((bx = x2)and(by = y2)) then begin // se busca de izquiera a derecha de la línea
      if (bnd=0) then j:=clineas[it].x0 else j:=clineas[it].xf; // si el punto seleccionado en el image intercepta
      while (j < lx) do begin                                   // un punto del componente, debemos borrarlo.
        image1.canvas.Rectangle(j,y2,j+21,y2+21); // el borrado gráfico se hace
        j := j+20;                                // cuadrito de 20 pizeles por
      end;                                        // cuadrito de 20 pixeles
      with clineas[it] do begin
        x0 := clineas[nfl-1].x0 ;
        y0 := clineas[nfl-1].y0 ;        // justo después del borrado gráfico,
        xf := clineas[nfl-1].xf ;        // borramos los datos de [i] trayendo
        yf := clineas[nfl-1].yf ;        // los datos del ultimo componente guardado
        mts := clineas[nfl-1].mts;       // a los datos de [i], y luego igualamos
        t := clineas[nfl-1].t ;          // los datos del ultimo componente guardado
      end;                               // a cero, de esta forma se borra sin
      with clineas[nfl-1] do begin       // hacer la gran cosa
        x0 := 0 ;
        y0 := 0 ;
        xf := 0 ;
        yf := 0 ;
        mts := 0;
        t := 0 ;
      end;
      nfl := nfl-1; // decrementamos en 1 el contador
    end;
    bx := bx+20; // la verdad no recuerdo para qué puse esto
  end;
   while (by < ly) do begin //buscar línea vertical
    if ((bx = x2)and(by = y2)) then begin
      if (bnd = 0) then j := clineas[it].y0 else j := clineas[it].yf;
      while (j < ly) do begin
        image1.canvas.Rectangle(x2,j,x2+21,j+21);
        j := j+20;
      end;
      with clineas[it] do begin       // para borrar una línea que fue dibujada
        x0 := clineas[nfl-1].x0 ;     // en forma vertical funcioa igual que con
        y0 := clineas[nfl-1].y0 ;     // una horizontal, pero en éstas se busca
        xf := clineas[nfl-1].xf ;     // la intersección de arriba a abajo.
        yf := clineas[nfl-1].yf ;
        mts := clineas[nfl-1].mts;
        t := clineas[nfl-1].t ;
      end;
      with clineas[nfl-1] do begin
        x0 := 0 ;
        y0 := 0 ;
        xf := 0 ;
        yf := 0 ;
        mts := 0;
        t := 0 ;
      end;
      nfl := nfl - 1;
    end;
    by := by+20;
  end;
end;

for aux := 1 to (nfi-1) do begin // buscar en arreglo de imágenes
  for j := cimagenes[aux].x0 to ((cimagenes[aux].x0)+(60)) do begin  // busca x
    for k := cimagenes[aux].y0 to ((cimagenes[aux].y0)+(60)) do begin   // busca y
      if ((j = x2) and (k = y2)) then begin  // si encuentra intersección...
        for bx := 1 to 4 do begin
        lx := (cimagenes[aux].x0) + (20*(bx-1));
          for by := 1 to 4 do begin     // borrado gráfico con cuadritos de 20x20
            ly := (cimagenes[aux].y0) + (20*(by-1));
            image1.canvas.Rectangle(lx,ly,lx+21,ly+21);
          end;// luego borramos sus datos del array
        end;                             // para borrar una imágen la idea es la
        with cimagenes[aux] do begin     // misma que con las líneas, solo que
          x0 := cimagenes[nfi-1].x0 ;    // buscamos la intersección como algo
          y0 := cimagenes[nfi-1].y0 ;    // que está perdido en una matriz de
          ang := cimagenes[nfi-1].ang ;  // 4x4 (porque todas las imágenes son
          t := cimagenes[nfi-1].t ;      // de 80x80 pixeles)
        end;
        with cimagenes[nfi-1] do begin
          x0 := 0 ;
          y0 := 0 ;
          ang := 0 ;
          t := 0 ;
        end;
        nfi := nfi - 1;
      end;
    end;
  end;
end;
end;

// B O R R A R   T O D O <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Button9Click(Sender: TObject);
var I , J : integer;
begin
image1.canvas.Rectangle(0,0,2000,2000);
for I := 0 to 100 do begin
  image1.canvas.moveto(I*20,0);
  image1.canvas.lineto(I*20,2000);
end;
for J := 0 to 100 do begin
  image1.canvas.moveto(0,J*20);
  image1.canvas.lineto(2000,J*20);
end;  // llenamos todos los datos de todos los arreglos con ceros
for I := 1 to 100 do begin
    with clineas[nfl] do begin
      x0 := 0 ;
      y0 := 0 ;
      xf := 0 ;
      yf := 0 ;
      mts := 0;
      t := 0 ;
    end;
end;
for I := 1 to 300 do begin
  with cimagenes[nfi] do begin
    x0 := 0;
    y0 := 0;
    ang := 0;
    t := 0 ;
  end;
end;
// reiniciamos contadores de componentes
nfl := 1 ;
nfi := 1 ;
// y no hay más jajaj
end;

procedure TForm1.Edit1Change(Sender: TObject);
begin

end;

// C O N S T R U C T O R <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.FormCreate(Sender: TObject);
var  I, J : Integer;
begin
  // inicializamos nuestros contadores y auxiliares
  x1 := 0 ;  y1 := 0 ;  nfl := 1 ;  nfi := 1 ;
  lims := 20;
  // cargamos las imágenes
   // imágenes de 0 grados
   Firewall := TbitMap.Create;  Firewall.LoadFromFile('Firewall.bmp');
   Switch := TbitMap.Create;    Switch.LoadFromFile('Switch.bmp');
   Server := TbitMap.Create;    Server.LoadFromFile('Server.bmp');
   PC := TbitMap.Create;        PC.LoadFromFile('PC.bmp');
   Impresora := TbitMap.Create; Impresora.LoadFromFile('Impresora.bmp');

   //imágenes de 90 grados:
   Server90 := TbitMap.Create;    Server90.LoadFromFile('Server90.bmp');
   PC90 := TbitMap.Create;        PC90.LoadFromFile('PC90.bmp');
   Impresora90 := TbitMap.Create; Impresora90.LoadFromFile('Impresora90.bmp');

   //imágenes de 180 grados:
   Server180 := TbitMap.Create;    Server180.LoadFromFile('Server180.bmp');
   PC180 := TbitMap.Create;        PC180.LoadFromFile('PC180.bmp');
   Impresora180 := TbitMap.Create; Impresora180.LoadFromFile('Impresora180.bmp');

   //imágenes de 270 grados:
   Server270 := TbitMap.Create;    Server270.LoadFromFile('Server270.bmp');
   PC270 := TbitMap.Create;        PC270.LoadFromFile('PC270.bmp');
   Impresora270 := TbitMap.Create; Impresora270.LoadFromFile('Impresora270.bmp');

// definimos los colores del image
image1.canvas.brush.color := $00FBF8E1 ;
image1.canvas.Rectangle(0,0,2000,2000);
image1.canvas.pen.Color := clskyblue ;

for I := 0 to 100 do begin
  image1.canvas.moveto(I*20,0);
  image1.canvas.lineto(I*20,2000);
end;
// con estos dos for's pintamos la malla
for J := 0 to 100 do begin
  image1.canvas.moveto(0,J*20);
  image1.canvas.lineto(2000,J*20);
end;

end;

// I M A G E   C L I C K <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Image1Click(Sender: TObject);
var i : integer;
begin
//mouse click
pg := x2;   qg := y2;        // - Las calculamos como múliplos de 20.
x2 := x1-10;   y2 := y1-10;  // - Para fibras y cables necesitamos dos pares
x2 := (round(x2/20) ) *20 ;  //   de coordenadas.(las actuales y las anteriores)
y2 := (round(y2/20) ) *20 ;  // - Para las imágenes sólo las "actuales".

end;

// M O U S E   M O V E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
procedure TForm1.Image1MouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
// mouse move
x1:=x; y1:=y;  // obtiene las coordenadas del image en
end;

end.
{
                               :^)
                                                                                }
